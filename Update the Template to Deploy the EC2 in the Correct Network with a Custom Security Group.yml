AWSTemplateFormatVersion: 2010-09-09
Description: Deploys basic networking and an EC2 instance
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2' 
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: Enter t2.micro, t2.small, t3.micro or t3.small. Default is t2.micro.
Mappings:
  Subnet1Config:
    VPC1:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.0.0/24
    Public2:
      CIDR: 10.0.1.0/24
Resources:
  VPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap
        - Subnet1Config
        - VPC1
        - CIDR
      Tags:
        - Key: Name
          Value: ACG_VPC
  VPC1PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet1Config
        - Public1
        - CIDR
      Tags:
        - Key: Name
          Value: ACG_PUBLIC_1
  VPC1PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet1Config
        - Public2
        - CIDR
      Tags:
        - Key: Name
          Value: ACG_PUBLIC_2
  InternetGateway1:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: ACG_IGW
  GatewayToInternet1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1
  PublicRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: ACG_RT
  PublicRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet1
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1
  PublicSubnet1RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC1PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1
  PublicSubnet1RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC1PublicSubnet2
      RouteTableId: !Ref PublicRouteTable1
  PublicNetworkAcl1:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: ACG_NACL
  InboundHTTPPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundEmphemeralPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnet1NetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref VPC1PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl1
  PublicSubnet1NetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref VPC1PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl1
  WebSSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: Enable SSH access via port 22 and HTTP access via user defined port
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
  EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType:
        Ref: InstanceTypeParameter
      ImageId: !Ref LatestAmiId
      Tags:
        - Key: Name
          Value: MyInstance
      SecurityGroupIds: 
        - !Ref WebSSHSecurityGroup
      SubnetId: !Ref VPC1PublicSubnet1
